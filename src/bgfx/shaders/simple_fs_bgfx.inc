static const uint8_t simple_fs_bgfx[37281] =
{
	0x46, 0x53, 0x48, 0x08, 0x01, 0x83, 0xf2, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x75, // FSH............u
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // _alphaRef.......
	0x00, 0x0a, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x00, 0x10, 0x00, // ..u_fogColor....
	0x01, 0x00, 0x00, 0x00, 0x04, 0x74, 0x65, 0x78, 0x30, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // .....tex00......
	0x00, 0x58, 0x91, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x2a, 0xaf, 0xb2, 0x4c, 0xf2, 0x74, 0x58, // .X...DXBC*..L.tX
	0x2c, 0x1b, 0x73, 0x16, 0x27, 0xe0, 0x18, 0x5b, 0x42, 0x01, 0x00, 0x00, 0x00, 0x58, 0x91, 0x00, // ,.s.'..[B....X..
	0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, // .....0..........
	0x00, 0x50, 0x03, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x6c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .P...ISGNl......
	0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....P..........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x0f, 0x0f, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....b..........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x53, 0x56, 0x5f, // .............SV_
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, // POSITION.COLOR.T
	0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, // EXCOORD..OSGN,..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, // ................
	0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x44, // .SV_TARGET...SHD
	0x52, 0x70, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, // Rp...@.......Y..
	0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, // .F. .........Z..
	0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, // ..`......X....p.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0xf2, 0x10, 0x10, // .....UU..b......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, // .....b...r......
	0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, // .e.... ......h..
	0x02, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x01, 0x3a, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, // .....:...:...6..
	0x06, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x80, 0x41, 0x00, 0x00, // .............A..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // ........."......
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, // ..........@.....
	0x3f, 0x36, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, // ?6..............
	0x00, 0x02, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....E..........
	0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, // .F.......F~.....
	0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, // ..`......8......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x1e, 0x10, // .....F.......F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x06, 0x72, 0x00, 0x10, // .....:...6...r..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....F. ........
	0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // .6...r.......F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // .....6...r......
	0x00, 0xa6, 0x1a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x72, 0x00, 0x10, // .........6...r..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....F...A......
	0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // .....r.......F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // .....F.......8..
	0x07, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, // .r.......F......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, // .F...........r..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // .....F.......F..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....6...r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // .F.......6......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, // .....:.......:..
	0x01, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, // .6...........:..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....1..........
	0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, // .:......... ....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // ........."......
	0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, // .:......... ....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....<..........
	0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x04, // ................
	0x03, 0x01, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, // ..@..........6..
	0x05, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, // .. ......F......
	0x00, 0x3e, 0x00, 0x00, 0x01, 0x53, 0x50, 0x44, 0x42, 0x00, 0x8e, 0x00, 0x00, 0x4d, 0x69, 0x63, // .>...SPDB....Mic
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x43, 0x2f, 0x43, 0x2b, 0x2b, 0x20, 0x4d, 0x53, 0x46, // rosoft C/C++ MSF
	0x20, 0x37, 0x2e, 0x30, 0x30, 0x0d, 0x0a, 0x1a, 0x44, 0x53, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, //  7.00...DS......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // .....G...D......
	0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .F..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x00, 0x00, // .............8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, // . ...<..........
	0xff, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x2e, 0x31, // ...............1
	0x01, 0x50, 0xd9, 0xbe, 0x5e, 0x01, 0x00, 0x00, 0x00, 0x95, 0x1f, 0x76, 0xf0, 0xdd, 0x44, 0x9c, // .P..^......v..D.
	0x4d, 0xa8, 0x41, 0x88, 0xbe, 0x4b, 0x4b, 0x1e, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // M.A..KK.........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x51, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......Q3........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x3b, 0x20, // .............); 
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, // }.float4 intBits
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x5f, 0x78, // ToFloat(uint4 _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, // ) { return asflo
	0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // at(_x); }.float 
	0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, // uintBitsToFloat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // n asfloat(_x); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, // .float2 uintBits
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x78, // ToFloat(uint2 _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, // ) { return asflo
	0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // at(_x); }.float3
	0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, //  uintBitsToFloat
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (uint3 _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, // urn asfloat(_x);
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, //  }.float4 uintBi
	0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, // tsToFloat(uint4 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, // _x) { return asf
	0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, // loat(_x); }.uint
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, //  floatBitsToUint
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, // urn asuint(_x); 
	0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, // }.uint2 floatBit
	0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, // sToUint(float2 _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x75, 0x69, // x) { return asui
	0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, // nt(_x); }.uint3 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x28, // floatBitsToUint(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // float3 _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, // urn asuint(_x); 
	0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, // }.uint4 floatBit
	0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // sToUint(float4 _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x75, 0x69, // x) { return asui
	0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0xc6, 0x5a, 0x00, // nt(_x); }.int.Z.
	0x00, 0x4c, 0xe8, 0x03, 0x00, 0xde, 0xee, 0x01, 0x00, 0x50, 0x85, 0x01, 0x00, 0x00, 0x53, 0x00, // .L.......P....S.
	0x00, 0x48, 0x12, 0x02, 0x00, 0x1a, 0x76, 0x03, 0x00, 0x09, 0x53, 0x01, 0x00, 0x0a, 0x25, 0x02, // .H....v...S...%.
	0x00, 0x75, 0x83, 0x01, 0x00, 0x90, 0x05, 0x01, 0x00, 0x41, 0x24, 0x01, 0x00, 0xd4, 0x00, 0x02, // .u.......A$.....
	0x00, 0x31, 0x0c, 0x02, 0x00, 0xe9, 0xf0, 0x02, 0x00, 0x52, 0xa8, 0x01, 0x00, 0x2a, 0xe5, 0x01, // .1.......R...*..
	0x00, 0xee, 0x6a, 0x01, 0x00, 0x21, 0xb7, 0x01, 0x00, 0xad, 0x6f, 0x02, 0x00, 0xdc, 0xc0, 0x01, // ..j..!....o.....
	0x00, 0x09, 0xf1, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x2f, 0x20, // .............// 
	0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, // shaderc command 
	0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x0a, 0x2f, 0x2f, 0x20, 0x46, 0x3a, 0x5c, 0x64, 0x65, 0x76, 0x5c, // line:.// F:.dev.
	0x63, 0x6f, 0x64, 0x65, 0x5c, 0x62, 0x67, 0x66, 0x78, 0x5c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, // code.bgfx..build
	0x5c, 0x77, 0x69, 0x6e, 0x36, 0x34, 0x5f, 0x76, 0x73, 0x32, 0x30, 0x31, 0x39, 0x5c, 0x62, 0x69, // .win64_vs2019.bi
	0x6e, 0x5c, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, // n.shadercRelease
	0x2e, 0x65, 0x78, 0x65, 0x20, 0x2d, 0x2d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x2d, 0x66, 0x20, // .exe --debug -f 
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x20, 0x2d, 0x6f, 0x20, 0x73, // simple.frag -o s
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x5f, 0x62, 0x67, 0x66, 0x78, 0x2e, 0x69, 0x6e, // imple_fs_bgfx.in
	0x63, 0x20, 0x2d, 0x2d, 0x62, 0x69, 0x6e, 0x32, 0x63, 0x20, 0x2d, 0x2d, 0x74, 0x79, 0x70, 0x65, // c --bin2c --type
	0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x2d, 0x2d, 0x70, 0x6c, 0x61, 0x74, //  fragment --plat
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x2d, 0x2d, 0x70, // form windows --p
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x70, 0x73, 0x5f, 0x34, 0x5f, 0x30, 0x0a, 0x0a, 0x66, // rofile ps_4_0..f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, // loat intBitsToFl
	0x6f, 0x61, 0x74, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // oat(int _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, // turn asfloat(_x)
	0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, // ; }.float2 intBi
	0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, // tsToFloat(uint2 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, // _x) { return asf
	0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // loat(_x); }.floa
	0x74, 0x33, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, // t3 intBitsToFloa
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // t(uint3 _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, // turn asfloat(_x)
	0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, // ; }.float4 intBi
	0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, // tsToFloat(uint4 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, // _x) { return asf
	0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // loat(_x); }.floa
	0x74, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, // t uintBitsToFloa
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, // urn asfloat(_x);
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, //  }.float2 uintBi
	0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, // tsToFloat(uint2 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, // _x) { return asf
	0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // loat(_x); }.floa
	0x74, 0x33, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, // t3 uintBitsToFlo
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(uint3 _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, // eturn asfloat(_x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x69, 0x6e, 0x74, // ); }.float4 uint
	0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // BitsToFloat(uint
	0x34, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, // 4 _x) { return a
	0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, // sfloat(_x); }.ui
	0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x69, // nt floatBitsToUi
	0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // nt(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, // eturn asuint(_x)
	0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, // ; }.uint2 floatB
	0x69, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // itsToUint(float2
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, //  _x) { return as
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, // uint(_x); }.uint
	0x33, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, // 3 floatBitsToUin
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // t(float3 _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, // eturn asuint(_x)
	0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, // ; }.uint4 floatB
	0x69, 0x74, 0x73, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // itsToUint(float4
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, //  _x) { return as
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x20, // uint(_x); }.int 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x28, 0x66, // floatBitsToInt(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x69, // n asint(_x); }.i
	0x6e, 0x74, 0x32, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x49, // nt2 floatBitsToI
	0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // nt(float2 _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, // return asint(_x)
	0x3b, 0x20, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, // ; }.int3 floatBi
	0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // tsToInt(float3 _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x69, 0x6e, // x) { return asin
	0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x66, 0x6c, // t(_x); }.int4 fl
	0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, // oatBitsToInt(flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // at4 _x) { return
	0x20, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, //  asint(_x); }.ui
	0x6e, 0x74, 0x20, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, // nt bitfieldRever
	0x73, 0x65, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // se(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x62, 0x69, 0x74, 0x73, // turn reversebits
	0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x62, 0x69, // (_x); }.uint2 bi
	0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x28, 0x75, 0x69, // tfieldReverse(ui
	0x6e, 0x74, 0x32, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // nt2 _x) { return
	0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x62, 0x69, 0x74, 0x73, 0x28, 0x5f, 0x78, 0x29, //  reversebits(_x)
	0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, // ; }.uint3 bitfie
	0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, // ldReverse(uint3 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x76, // _x) { return rev
	0x65, 0x72, 0x73, 0x65, 0x62, 0x69, 0x74, 0x73, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ersebits(_x); }.
	0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, // uint4 bitfieldRe
	0x76, 0x65, 0x72, 0x73, 0x65, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x5f, 0x78, 0x29, 0x20, // verse(uint4 _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, // { return reverse
	0x62, 0x69, 0x74, 0x73, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, // bits(_x); }.uint
	0x20, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x66, 0x6c, //  packHalf2x16(fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // oat2 _x).{.retur
	0x6e, 0x20, 0x28, 0x66, 0x33, 0x32, 0x74, 0x6f, 0x66, 0x31, 0x36, 0x28, 0x5f, 0x78, 0x2e, 0x79, // n (f32tof16(_x.y
	0x29, 0x3c, 0x3c, 0x31, 0x36, 0x29, 0x20, 0x7c, 0x20, 0x66, 0x33, 0x32, 0x74, 0x6f, 0x66, 0x31, // )<<16) | f32tof1
	0x36, 0x28, 0x5f, 0x78, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 6(_x.x);.}.float
	0x32, 0x20, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, // 2 unpackHalf2x16
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // (uint _x).{.retu
	0x72, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x66, 0x31, 0x36, 0x74, 0x6f, 0x66, // rn float2(f16tof
	0x33, 0x32, 0x28, 0x5f, 0x78, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x29, 0x2c, // 32(_x & 0xffff),
	0x20, 0x66, 0x31, 0x36, 0x74, 0x6f, 0x66, 0x33, 0x32, 0x28, 0x5f, 0x78, 0x20, 0x3e, 0x3e, 0x20, //  f16tof32(_x >> 
	0x31, 0x36, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // 16) );.}.struct 
	0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x0a, 0x7b, 0x0a, // BgfxSampler2D.{.
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, // SamplerState m_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // ampler;.Texture2
	0x44, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // D m_texture;.};.
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, // struct BgfxISamp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // ler2D.{.Texture2
	0x44, 0x3c, 0x69, 0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // D<int4> m_textur
	0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, // e;.};.struct Bgf
	0x78, 0x55, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, // xUSampler2D.{.Te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, // xture2D<uint4> m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, // _texture;.};.str
	0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uct BgfxSampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // DArray.{.Sampler
	0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, // State m_sampler;
	0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, // .Texture2DArray 
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, // m_texture;.};.st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ruct BgfxSampler
	0x32, 0x44, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, // 2DShadow.{.Sampl
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, // erComparisonStat
	0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, // e m_sampler;.Tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ture2D m_texture
	0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, // ;.};.struct Bgfx
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, // Sampler2DArraySh
	0x61, 0x64, 0x6f, 0x77, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, // adow.{.SamplerCo
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, // mparisonState m_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // sampler;.Texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // 2DArray m_textur
	0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, // e;.};.struct Bgf
	0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, // xSampler3D.{.Sam
	0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, // plerState m_samp
	0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x6d, // ler;.Texture3D m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, // _texture;.};.str
	0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // uct BgfxISampler
	0x33, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x3c, 0x69, // 3D.{.Texture3D<i
	0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, // nt4> m_texture;.
	0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x55, 0x53, // };.struct BgfxUS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, // ampler3D.{.Textu
	0x72, 0x65, 0x33, 0x44, 0x3c, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, // re3D<uint4> m_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // xture;.};.struct
	0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, //  BgfxSamplerCube
	0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, // .{.SamplerState 
	0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, // m_sampler;.Textu
	0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reCube m_texture
	0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, // ;.};.struct Bgfx
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, // SamplerCubeShado
	0x77, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, // w.{.SamplerCompa
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, // risonState m_sam
	0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, // pler;.TextureCub
	0x65, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // e m_texture;.};.
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, // struct BgfxSampl
	0x65, 0x72, 0x32, 0x44, 0x4d, 0x53, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // er2DMS.{.Texture
	0x32, 0x44, 0x4d, 0x53, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, // 2DMS<float4> m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // exture;.};.float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, // 4 bgfxTexture2D(
	0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, // BgfxSampler2D _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, // ampler, float2 _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // coord).{.return 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // _sampler.m_textu
	0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // re.Sample(_sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // er.m_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // oord);.}.float4 
	0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x42, 0x69, 0x61, // bgfxTexture2DBia
	0x73, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // s(BgfxSampler2D 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // _sampler, float2
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, //  _coord, float _
	0x62, 0x69, 0x61, 0x73, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, // bias).{.return _
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // sampler.m_textur
	0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x61, 0x73, 0x28, 0x5f, 0x73, 0x61, // e.SampleBias(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // mpler.m_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x29, 0x3b, //  _coord, _bias);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, // .}.float4 bgfxTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // xture2DLod(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ampler2D _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float2 _coord
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x0a, // , float _level).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, // r.m_texture.Samp
	0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // leLevel(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // rd, _level);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // loat4 bgfxTextur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, // e2DLodOffset(Bgf
	0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // xSampler2D _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // ler, float2 _coo
	0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, // rd, float _level
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, 0x0a, // , int2 _offset).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, // r.m_texture.Samp
	0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // leLevel(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x5f, 0x6f, 0x66, 0x66, // rd, _level, _off
	0x73, 0x65, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // set);.}.float4 b
	0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // gfxTexture2DProj
	0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, // (BgfxSampler2D _
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // sampler, float3 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // _coord).{.float2
	0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, //  coord = _coord.
	0x78, 0x79, 0x20, 0x2a, 0x20, 0x72, 0x63, 0x70, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, // xy * rcp(_coord.
	0x7a, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // z);.return _samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, // ler.m_texture.Sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // mple(_sampler.m_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, // sampler, coord);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, // .}.float4 bgfxTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x42, 0x67, 0x66, 0x78, // xture2DProj(Bgfx
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // Sampler2D _sampl
	0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // er, float4 _coor
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, // d).{.float2 coor
	0x64, 0x20, 0x3d, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, // d = _coord.xy * 
	0x72, 0x63, 0x70, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x72, // rcp(_coord.w);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // eturn _sampler.m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // _texture.Sample(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // _sampler.m_sampl
	0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // er, coord);.}.fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // oat4 bgfxTexture
	0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, // 2DGrad(BgfxSampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, // er2D _sampler, f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, // loat2 _coord, fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x64, 0x50, 0x64, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // oat2 _dPdx, floa
	0x74, 0x32, 0x20, 0x5f, 0x64, 0x50, 0x64, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t2 _dPdy).{.retu
	0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, // rn _sampler.m_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x64, // xture.SampleGrad
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, // (_sampler.m_samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x64, 0x50, // ler, _coord, _dP
	0x64, 0x78, 0x2c, 0x20, 0x5f, 0x64, 0x50, 0x64, 0x79, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // dx, _dPdy);.}.fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // oat4 bgfxTexture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, // 2DArray(BgfxSamp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ler2DArray _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // ler, float3 _coo
	0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, // rd).{.return _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // mpler.m_texture.
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // Sample(_sampler.
	0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // m_sampler, _coor
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, // d);.}.float4 bgf
	0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, // xTexture2DArrayL
	0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // od(BgfxSampler2D
	0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // Array _sampler, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, // float3 _coord, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // loat _lod).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, // urn _sampler.m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x65, 0x76, // exture.SampleLev
	0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, // el(_sampler.m_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, // mpler, _coord, _
	0x6c, 0x6f, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // lod);.}.float4 b
	0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // gfxTexture2DArra
	0x79, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // yLodOffset(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, // ampler2DArray _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // ampler, float3 _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, // coord, float _le
	0x76, 0x65, 0x6c, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, // vel, int2 _offse
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, // t).{.return _sam
	0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, // pler.m_texture.S
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ampleLevel(_samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // ler.m_sampler, _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x5f, // coord, _level, _
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // offset);.}.float
	0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x42, 0x67, //  bgfxShadow2D(Bg
	0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x53, 0x68, 0x61, 0x64, 0x6f, // fxSampler2DShado
	0x77, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // w _sampler, floa
	0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t3 _coord).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, // urn _sampler.m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6d, 0x70, // exture.SampleCmp
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // LevelZero(_sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // er.m_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, // oord.xy, _coord.
	0x7a, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x67, 0x66, 0x78, // z);.}.float bgfx
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x42, 0x67, 0x66, // Shadow2DProj(Bgf
	0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // xSampler2DShadow
	0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  _sampler, float
	0x34, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 4 _coord).{.floa
	0x74, 0x33, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // t3 coord = _coor
	0x64, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x72, 0x63, 0x70, 0x28, 0x5f, 0x63, 0x6f, 0x6f, // d.xyz * rcp(_coo
	0x72, 0x64, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, // rd.w);.return _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ampler.m_texture
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, // .SampleCmpLevelZ
	0x65, 0x72, 0x6f, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, // ero(_sampler.m_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, // ampler, coord.xy
	0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // , coord.z);.}.fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, // oat4 bgfxShadow2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, // DArray(BgfxSampl
	0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, // er2DArrayShadow 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // _sampler, float4
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  _coord).{.retur
	0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, // n _sampler.m_tex
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6d, 0x70, 0x4c, 0x65, // ture.SampleCmpLe
	0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // velZero(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x77, // rd.xyz, _coord.w
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, // );.}.float4 bgfx
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, // Texture3D(BgfxSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // mpler3D _sampler
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // , float3 _coord)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // .{.return _sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, // er.m_texture.Sam
	0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, // ple(_sampler.m_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, // ampler, _coord);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, // .}.float4 bgfxTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x4c, 0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // xture3DLod(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ampler3D _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float3 _coord
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x0a, // , float _level).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, // r.m_texture.Samp
	0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // leLevel(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, // rd, _level);.}.i
	0x6e, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, // nt4 bgfxTexture3
	0x44, 0x28, 0x42, 0x67, 0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, // D(BgfxISampler3D
	0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  _sampler, float
	0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x75, 0x69, 0x6e, 0x74, // 3 _coord).{.uint
	0x33, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // 3 size;._sampler
	0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, // .m_texture.GetDi
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x2c, // mensions(size.x,
	0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x79, 0x2c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, //  size.y, size.z)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, // r.m_texture.Load
	0x28, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x73, // (int4(_coord * s
	0x69, 0x7a, 0x65, 0x2c, 0x20, 0x30, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x69, 0x6e, // ize, 0) );.}.uin
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, // t4 bgfxTexture3D
	0x28, 0x42, 0x67, 0x66, 0x78, 0x55, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, // (BgfxUSampler3D 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // _sampler, float3
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, //  _coord).{.uint3
	0x20, 0x73, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, //  size;._sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, // m_texture.GetDim
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x2c, 0x20, // ensions(size.x, 
	0x73, 0x69, 0x7a, 0x65, 0x2e, 0x79, 0x2c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x3b, // size.y, size.z);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .return _sampler
	0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, // .m_texture.Load(
	0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x73, 0x69, // int4(_coord * si
	0x7a, 0x65, 0x2c, 0x20, 0x30, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ze, 0) );.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // t4 bgfxTextureCu
	0x62, 0x65, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, // be(BgfxSamplerCu
	0x62, 0x65, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // be _sampler, flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // at3 _coord).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // turn _sampler.m_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, // texture.Sample(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // sampler.m_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // r, _coord);.}.fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // oat4 bgfxTexture
	0x43, 0x75, 0x62, 0x65, 0x42, 0x69, 0x61, 0x73, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // CubeBias(BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // plerCube _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float3 _coord
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x29, 0x0a, 0x7b, // , float _bias).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .return _sampler
	0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, // .m_texture.Sampl
	0x65, 0x42, 0x69, 0x61, 0x73, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // eBias(_sampler.m
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x2c, 0x20, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // , _bias);.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // t4 bgfxTextureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // beLod(BgfxSample
	0x72, 0x43, 0x75, 0x62, 0x65, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // rCube _sampler, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, // float3 _coord, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // loat _level).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // eturn _sampler.m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, // _texture.SampleL
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // evel(_sampler.m_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, // sampler, _coord,
	0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  _level);.}.floa
	0x74, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x75, 0x62, 0x65, // t bgfxShadowCube
	0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, // (BgfxSamplerCube
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // Shadow _sampler,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, //  float4 _coord).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, // r.m_texture.Samp
	0x6c, 0x65, 0x43, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x28, 0x5f, // leCmpLevelZero(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // sampler.m_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, // r, _coord.xyz, _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // coord.w);.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, // t4 bgfxTexelFetc
	0x68, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // h(BgfxSampler2D 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, // _sampler, int2 _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, // coord, int _lod)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // .{.return _sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, // er.m_texture.Loa
	0x64, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, // d(int3(_coord, _
	0x6c, 0x6f, 0x64, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // lod) );.}.float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, //  bgfxTexelFetchO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ffset(BgfxSample
	0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, // r2D _sampler, in
	0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, // t2 _coord, int _
	0x6c, 0x6f, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, // lod, int2 _offse
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, // t).{.return _sam
	0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, // pler.m_texture.L
	0x6f, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, // oad(int3(_coord,
	0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x2c, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, //  _lod), _offset 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x62, 0x67, 0x66, 0x78, // );.}.float2 bgfx
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x42, 0x67, 0x66, 0x78, // TextureSize(Bgfx
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // Sampler2D _sampl
	0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, // er, int _lod).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x5f, // float2 result;._
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // sampler.m_textur
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, // e.GetDimensions(
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, // result.x, result
	0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, // .y);.return resu
	0x6c, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, // lt;.}.float4 bgf
	0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x28, 0x42, // xTextureGather(B
	0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, // gfxSampler2D _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, // mpler, float2 _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, // oord).{.return _
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // sampler.m_textur
	0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x64, 0x28, 0x5f, 0x73, 0x61, 0x6d, // e.GatherRed(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // pler.m_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // _coord );.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, // t4 bgfxTextureGa
	0x74, 0x68, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // therOffset(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ampler2D _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float2 _coord
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, 0x0a, // , int2 _offset).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, // r.m_texture.Gath
	0x65, 0x72, 0x52, 0x65, 0x64, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // erRed(_sampler.m
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x2c, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , _offset );.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // loat4 bgfxTextur
	0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, // eGather(BgfxSamp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ler2DArray _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // ler, float3 _coo
	0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, // rd).{.return _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // mpler.m_texture.
	0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x64, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // GatherRed(_sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // er.m_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x62, // oord );.}.int4 b
	0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, // gfxTexelFetch(Bg
	0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, // fxISampler2D _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // mpler, int2 _coo
	0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, // rd, int _lod).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, // m_texture.Load(i
	0x6e, 0x74, 0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x6f, 0x64, // nt3(_coord, _lod
	0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, // ) );.}.uint4 bgf
	0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, 0x66, 0x78, // xTexelFetch(Bgfx
	0x55, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // USampler2D _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ler, int2 _coord
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // , int _lod).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // turn _sampler.m_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, // texture.Load(int
	0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x20, // 3(_coord, _lod) 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, // );.}.float4 bgfx
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // TexelFetch(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x4d, 0x53, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ampler2DMS _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ler, int2 _coord
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x78, // , int _sampleIdx
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ).{.return _samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, // ler.m_texture.Lo
	0x61, 0x64, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ad(_coord, _samp
	0x6c, 0x65, 0x49, 0x64, 0x78, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // leIdx);.}.float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, //  bgfxTexelFetch(
	0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // BgfxSampler2DArr
	0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, // ay _sampler, int
	0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, // 3 _coord, int _l
	0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, // od).{.return _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // mpler.m_texture.
	0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // Load(int4(_coord
	0x2c, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // , _lod) );.}.flo
	0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, // at4 bgfxTexelFet
	0x63, 0x68, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, // ch(BgfxSampler3D
	0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x20, //  _sampler, int3 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, // _coord, int _lod
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ).{.return _samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, // ler.m_texture.Lo
	0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // ad(int4(_coord, 
	0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _lod) );.}.float
	0x33, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, // 3 bgfxTextureSiz
	0x65, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, // e(BgfxSampler3D 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, // _sampler, int _l
	0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x72, 0x65, 0x73, // od).{.float3 res
	0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // ult;._sampler.m_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, // texture.GetDimen
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x2c, 0x20, // sions(result.x, 
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, // result.y, result
	0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, // .z);.return resu
	0x6c, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x69, 0x6e, 0x73, // lt;.}.float3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // tMul(float3 _vec
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, // , float3x3 _mtx)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x6d, //  { return mul(_m
	0x74, 0x78, 0x2c, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // tx, _vec); }.flo
	0x61, 0x74, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, // at3 instMul(floa
	0x74, 0x33, 0x78, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t3x3 _mtx, float
	0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _vec) { return
	0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  mul(_vec, _mtx)
	0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, // ; }.float4 instM
	0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // ul(float4 _vec, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // float4x4 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x6d, 0x74, 0x78, //  return mul(_mtx
	0x2c, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , _vec); }.float
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // 4 instMul(float4
	0x78, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // x4 _mtx, float4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // _vec) { return m
	0x75, 0x6c, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x3b, 0x20, // ul(_vec, _mtx); 
	0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, // }.bool2 lessThan
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // (float2 _a, floa
	0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t2 _b) { return 
	0x5f, 0x61, 0x20, 0x3c, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, // _a < _b; }.bool3
	0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, //  lessThan(float3
	0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, //  _a, float3 _b) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3c, 0x20, 0x5f, 0x62, // { return _a < _b
	0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, // ; }.bool4 lessTh
	0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, // an(float4 _a, fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // oat4 _b) { retur
	0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3c, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, // n _a < _b; }.boo
	0x6c, 0x32, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, // l2 lessThanEqual
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // (float2 _a, floa
	0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t2 _b) { return 
	0x5f, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, // _a <= _b; }.bool
	0x33, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, // 3 lessThanEqual(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float3 _a, float
	0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, // 3 _b) { return _
	0x61, 0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, // a <= _b; }.bool4
	0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, //  lessThanEqual(f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // loat4 _a, float4
	0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, //  _b) { return _a
	0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, //  <= _b; }.bool2 
	0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, // greaterThan(floa
	0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, // t2 _a, float2 _b
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x20, // ) { return _a > 
	0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, 0x67, 0x72, 0x65, 0x61, // _b; }.bool3 grea
	0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // terThan(float3 _
	0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, // a, float3 _b) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x20, 0x5f, 0x62, 0x3b, 0x20, // return _a > _b; 
	0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, // }.bool4 greaterT
	0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, // han(float4 _a, f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // loat4 _b) { retu
	0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, // rn _a > _b; }.bo
	0x6f, 0x6c, 0x32, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, // ol2 greaterThanE
	0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, // qual(float2 _a, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // float2 _b) { ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, // urn _a >= _b; }.
	0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, // bool3 greaterTha
	0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, // nEqual(float3 _a
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, // , float3 _b) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, // eturn _a >= _b; 
	0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, // }.bool4 greaterT
	0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // hanEqual(float4 
	0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, // _a, float4 _b) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x62, //  return _a >= _b
	0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, // ; }.bool2 notEqu
	0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, // al(float2 _a, fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // oat2 _b) { retur
	0x6e, 0x20, 0x5f, 0x61, 0x20, 0x21, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, // n _a != _b; }.bo
	0x6f, 0x6c, 0x33, 0x20, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, // ol3 notEqual(flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // at3 _a, float3 _
	0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x21, // b) { return _a !
	0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x6e, 0x6f, // = _b; }.bool4 no
	0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, // tEqual(float4 _a
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, // , float4 _b) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x21, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, // eturn _a != _b; 
	0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, // }.bool2 equal(fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // oat2 _a, float2 
	0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, // _b) { return _a 
	0x3d, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, 0x65, // == _b; }.bool3 e
	0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, // qual(float3 _a, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // float3 _b) { ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, // urn _a == _b; }.
	0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, // bool4 equal(floa
	0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, // t4 _a, float4 _b
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3d, 0x3d, // ) { return _a ==
	0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6d, 0x69, 0x78, //  _b; }.float mix
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (float _a, float
	0x20, 0x5f, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, //  _b, float _t) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, //  return lerp(_a,
	0x20, 0x5f, 0x62, 0x2c, 0x20, 0x5f, 0x74, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  _b, _t); }.floa
	0x74, 0x32, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, // t2 mix(float2 _a
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // , float2 _b, flo
	0x61, 0x74, 0x32, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // at2 _t) { return
	0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x5f, 0x74, //  lerp(_a, _b, _t
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x69, 0x78, 0x28, // ); }.float3 mix(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float3 _a, float
	0x33, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x74, 0x29, // 3 _b, float3 _t)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, //  { return lerp(_
	0x61, 0x2c, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x5f, 0x74, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // a, _b, _t); }.fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // oat4 mix(float4 
	0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x66, // _a, float4 _b, f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // loat4 _t) { retu
	0x72, 0x6e, 0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, 0x20, 0x5f, 0x62, 0x2c, 0x20, // rn lerp(_a, _b, 
	0x5f, 0x74, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x64, // _t); }.float mod
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (float _a, float
	0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, //  _b) { return _a
	0x20, 0x2d, 0x20, 0x5f, 0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x5f, 0x61, //  - _b * floor(_a
	0x20, 0x2f, 0x20, 0x5f, 0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  / _b); }.float2
	0x20, 0x6d, 0x6f, 0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, //  mod(float2 _a, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // float2 _b) { ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x2d, 0x20, 0x5f, 0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, // urn _a - _b * fl
	0x6f, 0x6f, 0x72, 0x28, 0x5f, 0x61, 0x20, 0x2f, 0x20, 0x5f, 0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // oor(_a / _b); }.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x6f, 0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float3 mod(float
	0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, // 3 _a, float3 _b)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x2d, 0x20, 0x5f, //  { return _a - _
	0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x5f, 0x61, 0x20, 0x2f, 0x20, 0x5f, // b * floor(_a / _
	0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x6f, 0x64, // b); }.float4 mod
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // (float4 _a, floa
	0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t4 _b) { return 
	0x5f, 0x61, 0x20, 0x2d, 0x20, 0x5f, 0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, // _a - _b * floor(
	0x5f, 0x61, 0x20, 0x2f, 0x20, 0x5f, 0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // _a / _b); }.floa
	0x74, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // t2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, //  float2(_x, _x);
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.float3 vec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, //  return float3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // x, _x, _x); }.fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // oat4 vec4_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // rn float4(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, // , _x, _x); }.uin
	0x74, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, // t2 uvec2_splat(u
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // int _x) { return
	0x20, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, //  uint2(_x, _x); 
	0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // }.uint3 uvec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // lat(uint _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, // eturn uint3(_x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, // _x, _x); }.uint4
	0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, //  uvec4_splat(uin
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, // t _x) { return u
	0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // int4(_x, _x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, //  _x); }.float4x4
	0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x66, 0x6c, 0x6f, //  mtxFromRows(flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // at4 _0, float4 _
	0x31, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x66, 0x6c, // 1, float4 _2, fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // oat4 _3).{.retur
	0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // n float4x4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // 1, _2, _3);.}.fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // oat4x4 mtxFromCo
	0x6c, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, // ls(float4 _0, fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // oat4 _1, float4 
	0x5f, 0x32, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, // _2, float4 _3).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // e(float4x4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // float3x3 mtxFrom
	0x52, 0x6f, 0x77, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // Rows(float3 _0, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float3 _1, float
	0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, // 3 _2).{.return f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // loat3x3(_0, _1, 
	0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, // _2);.}.float3x3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x61, // mtxFromCols(floa
	0x74, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, // t3 _0, float3 _1
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // , float3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // float3x3(_0, _1,
	0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, //  _2) );.}.static
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, //  float4 u_viewRe
	0x63, 0x74, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ct;.static float
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x73, // 4 u_viewTexel;.s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, // tatic float4x4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, // _view;.static fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // oat4x4 u_invView
	0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // ;.static float4x
	0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, // 4 u_proj;.static
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, //  float4x4 u_invP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, // roj;.static floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // t4x4 u_viewProj;
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, // .static float4x4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, //  u_invViewProj;.
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, // static float4x4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x73, 0x74, 0x61, // u_model[32];.sta
	0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x6d, // tic float4x4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, // odelView;.static
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, //  float4x4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, // lViewProj;.stati
	0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, // c float4 u_alpha
	0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x66, 0x6c, // Ref4;.uniform fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x3b, // oat4 u_alphaRef;
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, // .static float4 u
	0x5f, 0x66, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, // _fogStart;.stati
	0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x45, 0x6e, // c float4 u_fogEn
	0x64, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // d;.static float4
	0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3b, 0x0a, 0x73, 0x74, 0x61, //  u_fogRange;.sta
	0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, // tic float4 u_fog
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // Disable;.uniform
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x43, 0x6f, 0x6c, //  float4 u_fogCol
	0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x6f, 0x41, 0x6c, 0x70, 0x68, 0x61, // or;.void DoAlpha
	0x54, 0x65, 0x73, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x29, 0x0a, 0x7b, 0x0a, // Test(float a).{.
	0x69, 0x66, 0x28, 0x61, 0x20, 0x3c, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // if(a < u_alphaRe
	0x66, 0x2e, 0x78, 0x20, 0x7c, 0x7c, 0x20, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x75, 0x5f, 0x61, 0x6c, // f.x || a >= u_al
	0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x2e, 0x79, 0x29, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, // phaRef.y).discar
	0x64, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x53, 0x61, 0x6d, // d;.}.uniform Sam
	0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 0x78, 0x30, 0x53, 0x61, // plerState tex0Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, // mpler : register
	0x28, 0x73, 0x30, 0x29, 0x3b, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x54, 0x65, // (s0); uniform Te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x30, 0x54, 0x65, 0x78, 0x74, // xture2D tex0Text
	0x75, 0x72, 0x65, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, // ure : register(t
	0x30, 0x29, 0x3b, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, // 0); static BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x30, 0x20, 0x3d, 0x20, // ampler2D tex0 = 
	0x7b, 0x20, 0x74, 0x65, 0x78, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x74, // { tex0Sampler, t
	0x65, 0x78, 0x30, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x7d, 0x3b, 0x0a, 0x76, 0x6f, // ex0Texture };.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // id main( float4 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3a, 0x20, 0x53, // gl_FragCoord : S
	0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // V_POSITION , flo
	0x61, 0x74, 0x34, 0x20, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x20, 0x3a, 0x20, 0x43, // at4 v_color0 : C
	0x4f, 0x4c, 0x4f, 0x52, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, // OLOR , float3 v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, // texcoord0 : TEXC
	0x4f, 0x4f, 0x52, 0x44, 0x30, 0x20, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // OORD0 , out floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // t4 bgfx_FragData
	0x30, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x30, 0x20, 0x29, // 0 : SV_TARGET0 )
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x56, // .{.float4 bgfx_V
	0x6f, 0x69, 0x64, 0x46, 0x72, 0x61, 0x67, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // oidFrag = vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // plat(0.0);.float
	0x34, 0x20, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, // 4 col = v_color0
	0x2a, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, 0x74, // *bgfxTexture2D(t
	0x65, 0x78, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, // ex0, float2(v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x76, // xcoord0.x, 1.0-v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, // _texcoord0.y));.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, // bgfx_FragData0 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x75, 0x5f, 0x66, 0x6f, //  float4(mix(u_fo
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x72, 0x67, 0x62, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x2e, // gColor.rgb, col.
	0x72, 0x67, 0x62, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // rgb, v_texcoord0
	0x2e, 0x7a, 0x29, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x44, 0x6f, 0x41, // .z), col.a);.DoA
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x29, 0x3b, // lphaTest(col.a);
	0x0a, 0x7d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .}..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xef, 0xfe, // ................
	0xef, 0x01, 0x00, 0x00, 0x00, 0x49, 0x2c, 0x00, 0x00, 0x00, 0x46, 0x3a, 0x5c, 0x64, 0x65, 0x76, // .....I,...F:.dev
	0x5c, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x72, 0x65, 0x33, 0x2d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, // .code.re3-upstre
	0x61, 0x6d, 0x5c, 0x6c, 0x69, 0x62, 0x72, 0x77, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x62, 0x67, 0x66, // am.librw.src.bgf
	0x78, 0x5c, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, // x.shaders.simple
	0x5f, 0x66, 0x73, 0x5f, 0x62, 0x67, 0x66, 0x78, 0x2e, 0x69, 0x6e, 0x63, 0x2e, 0x68, 0x6c, 0x73, // _fs_bgfx.inc.hls
	0x6c, 0x00, 0x00, 0x66, 0x3a, 0x5c, 0x64, 0x65, 0x76, 0x5c, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x72, // l..f:.dev.code.r
	0x65, 0x33, 0x2d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5c, 0x6c, 0x69, 0x62, 0x72, // e3-upstream.libr
	0x77, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x62, 0x67, 0x66, 0x78, 0x5c, 0x73, 0x68, 0x61, 0x64, 0x65, // w.src.bgfx.shade
	0x72, 0x73, 0x5c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x5f, 0x62, 0x67, 0x66, // rs.simple_fs_bgf
	0x78, 0x2e, 0x69, 0x6e, 0x63, 0x2e, 0x68, 0x6c, 0x73, 0x6c, 0x00, 0x2f, 0x2f, 0x20, 0x73, 0x68, // x.inc.hlsl.// sh
	0x61, 0x64, 0x65, 0x72, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, // aderc command li
	0x6e, 0x65, 0x3a, 0x0a, 0x2f, 0x2f, 0x20, 0x46, 0x3a, 0x5c, 0x64, 0x65, 0x76, 0x5c, 0x63, 0x6f, // ne:.// F:.dev.co
	0x64, 0x65, 0x5c, 0x62, 0x67, 0x66, 0x78, 0x5c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5c, 0x77, // de.bgfx..build.w
	0x69, 0x6e, 0x36, 0x34, 0x5f, 0x76, 0x73, 0x32, 0x30, 0x31, 0x39, 0x5c, 0x62, 0x69, 0x6e, 0x5c, // in64_vs2019.bin.
	0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x65, // shadercRelease.e
	0x78, 0x65, 0x20, 0x2d, 0x2d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x2d, 0x66, 0x20, 0x73, 0x69, // xe --debug -f si
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x20, 0x2d, 0x6f, 0x20, 0x73, 0x69, 0x6d, // mple.frag -o sim
	0x70, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x5f, 0x62, 0x67, 0x66, 0x78, 0x2e, 0x69, 0x6e, 0x63, 0x20, // ple_fs_bgfx.inc 
	0x2d, 0x2d, 0x62, 0x69, 0x6e, 0x32, 0x63, 0x20, 0x2d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, // --bin2c --type f
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x2d, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, // ragment --platfo
	0x72, 0x6d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x2d, 0x2d, 0x70, 0x72, 0x6f, // rm windows --pro
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x70, 0x73, 0x5f, 0x34, 0x5f, 0x30, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, // file ps_4_0..flo
	0x61, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, // at intBitsToFloa
	0x74, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // t(int _x) { retu
	0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, // rn asfloat(_x); 
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, // }.float2 intBits
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x78, // ToFloat(uint2 _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, // ) { return asflo
	0x61, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // at(_x); }.float3
	0x20, 0x69, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x28, //  intBitsToFloat(
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // uint3 _x) { retu
	0x72, 0x6e, 0x20, 0x61, 0x73, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x5f, 0x78, 0x1b, 0xe2, 0x30, // rn asfloat(_x..0
	0x01, 0x80, 0x00, 0x00, 0x00, 0x49, 0x55, 0x12, 0x10, 0xe3, 0x2a, 0xd6, 0x01, 0x01, 0x00, 0x00, // .....IU...*.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x4a, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x1b, 0xe2, 0x30, 0x01, 0x21, 0x0d, 0xfe, // .J...(.....0.!..
	0xd9, 0xb6, 0x2b, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, // ..+......I...J..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x42, 0x00, 0x3c, 0x11, 0x10, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x01, 0x00, 0x01, // .B.<............
	0x00, 0xac, 0x4c, 0x0a, 0x00, 0x01, 0x00, 0x01, 0x00, 0xac, 0x4c, 0x4d, 0x69, 0x63, 0x72, 0x6f, // ..L.......LMicro
	0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68, // soft (R) HLSL Sh
	0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x31, 0x30, // ader Compiler 10
	0x2e, 0x31, 0x00, 0x00, 0x00, 0x36, 0x00, 0x3d, 0x11, 0x01, 0x68, 0x6c, 0x73, 0x6c, 0x46, 0x6c, // .1...6.=..hlslFl
	0x61, 0x67, 0x73, 0x00, 0x30, 0x78, 0x31, 0x30, 0x30, 0x35, 0x00, 0x68, 0x6c, 0x73, 0x6c, 0x54, // ags.0x1005.hlslT
	0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x70, 0x73, 0x5f, 0x34, 0x5f, 0x30, 0x00, 0x68, 0x6c, 0x73, // arget.ps_4_0.hls
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x2a, 0x00, 0x10, // lEntry.main..*..
	0x11, 0x00, 0x00, 0x00, 0x00, 0x88, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x60, 0x00, 0x00, // .............`..
	0x00, 0x01, 0x00, 0xa0, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x32, 0x00, 0x3e, 0x11, 0x00, 0x10, 0x00, // ....main.2.>....
	0x00, 0x09, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x00, // ...gl_FragCoord.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // ...............P
	0x11, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, // .........`......
	0x02, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, // .......P........
	0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // .`.............P
	0x11, 0x01, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, // .........`......
	0x02, 0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x04, // .......P........
	0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x0c, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x3e, // .`.............>
	0x11, 0x00, 0x10, 0x00, 0x00, 0x09, 0x00, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x00, // .......v_color0.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // ...............P
	0x11, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, // .........`......
	0x02, 0x10, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, // .......P........
	0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x14, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // .`.............P
	0x11, 0x01, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, // .........`......
	0x02, 0x18, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x04, // .......P........
	0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x1c, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3e, // .`...........2.>
	0x11, 0x01, 0x10, 0x00, 0x00, 0x09, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // .......v_texcoor
	0x64, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // d0..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, // ...P.........`..
	0x00, 0x01, 0x00, 0x10, 0x02, 0x20, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, // ..... .....P....
	0x00, 0x04, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x24, 0x00, 0x00, // .....`.......$..
	0x00, 0x16, 0x00, 0x50, 0x11, 0x01, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, // ...P.........`..
	0x00, 0x01, 0x00, 0x10, 0x02, 0x28, 0x00, 0x00, 0x00, 0x36, 0x00, 0x3e, 0x11, 0x00, 0x10, 0x00, // .....(...6.>....
	0x00, 0x09, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ...bgfx_FragData
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0...............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, // ...P.........`..
	0x00, 0x01, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x02, 0x00, 0x05, // ...........P....
	0x00, 0x04, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x04, 0x00, 0x00, // .....`..........
	0x00, 0x16, 0x00, 0x50, 0x11, 0x02, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, // ...P.........`..
	0x00, 0x01, 0x00, 0x10, 0x02, 0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x02, 0x00, 0x05, // ...........P....
	0x00, 0x0c, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x02, 0x0c, 0x00, 0x00, // .....`..........
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0xb4, 0x01, 0x00, // ...P............
	0x00, 0x01, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x04, 0x00, 0x04, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x01, 0x00, 0xb8, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0xb4, 0x01, 0x00, // ...P............
	0x00, 0x01, 0x00, 0xb8, 0x00, 0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x0c, 0x00, 0x04, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x01, 0x00, 0xa4, 0x00, 0x0c, 0x00, 0x00, // ................
	0x00, 0x2a, 0x00, 0x3e, 0x11, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x63, 0x6f, 0x6c, 0x00, 0x00, // .*.>.......col..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // ...............P
	0x11, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x00, 0xb0, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, // .......P........
	0x00, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x00, 0xb0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // ...............P
	0x11, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x00, 0xb0, // ................
	0x00, 0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x04, // .......P........
	0x00, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x26, 0x00, 0x4d, // .............&.M
	0x11, 0x80, 0x00, 0x00, 0x00, 0xe4, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x00, 0x09, // ................
	0x01, 0x0d, 0x3d, 0x06, 0x02, 0x0c, 0x38, 0x3c, 0x08, 0x00, 0x09, 0x08, 0x0d, 0x3c, 0x01, 0x80, // ..=...8<.....<..
	0x9c, 0x0c, 0x38, 0x00, 0x00, 0x42, 0x00, 0x3e, 0x11, 0x0b, 0x10, 0x00, 0x00, 0x88, 0x00, 0x3c, // ..8..B.>.......<
	0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x72, 0x65, // bgfxTexture2D re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, // turn value>.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x00, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, // ...P............
	0x00, 0x01, 0x00, 0x1c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x08, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x08, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, // ...P............
	0x00, 0x01, 0x00, 0x1c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x3e, 0x11, 0x09, 0x10, 0x00, // ...........>....
	0x00, 0x09, 0x00, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..._coord.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x04, 0x00, 0x04, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x38, 0x00, 0x04, 0x00, 0x00, // ...........8....
	0x00, 0x02, 0x00, 0x4e, 0x11, 0x26, 0x00, 0x4d, 0x11, 0x80, 0x00, 0x00, 0x00, 0xf0, 0x06, 0x00, // ...N.&.M........
	0x00, 0x01, 0x10, 0x00, 0x00, 0x07, 0x00, 0x09, 0x2f, 0x0d, 0x46, 0x0c, 0x6c, 0x80, 0xd4, 0x08, // ......../.F.l...
	0x00, 0x09, 0x36, 0x0d, 0x45, 0x01, 0x81, 0x34, 0x0c, 0x6c, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x3e, // ..6.E..4.l...:.>
	0x11, 0x0e, 0x10, 0x00, 0x00, 0x88, 0x00, 0x3c, 0x6d, 0x69, 0x78, 0x20, 0x72, 0x65, 0x74, 0x75, // .......<mix retu
	0x72, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // rn value>.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x00, 0x00, 0x04, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0xa0, 0x01, 0x00, // ...P............
	0x00, 0x01, 0x00, 0x14, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...........P....
	0x00, 0x08, 0x00, 0x04, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, // ................
	0x00, 0x2a, 0x00, 0x3e, 0x11, 0x01, 0x10, 0x00, 0x00, 0x09, 0x00, 0x5f, 0x61, 0x00, 0x00, 0x00, // .*.>......._a...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // ...............P
	0x11, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x80, // .........4......
	0x00, 0x10, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, // .......P........
	0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x14, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // .4.............P
	0x11, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x80, // .........4......
	0x00, 0x18, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x3e, 0x11, 0x01, 0x10, 0x00, 0x00, 0x09, 0x00, 0x5f, // .....*.>......._
	0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // b...............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, // ...P.........4..
	0x00, 0x01, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, // ...l.......P....
	0x00, 0x04, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x6c, 0x00, 0x04, 0x00, 0x00, // .....4.....l....
	0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, // ...P.........4..
	0x00, 0x01, 0x00, 0x6c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x3e, 0x11, 0x01, 0x10, 0x00, // ...l.....*.>....
	0x00, 0x09, 0x00, 0x5f, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..._t...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, // .......P........
	0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x50, 0x00, 0x20, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, // .4.....P. .....P
	0x11, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x50, // .........4.....P
	0x00, 0x24, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x04, // .$.....P........
	0x00, 0x34, 0x01, 0x00, 0x00, 0x01, 0x00, 0x50, 0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x4e, // .4.....P.(.....N
	0x11, 0x4a, 0x00, 0x4d, 0x11, 0x80, 0x00, 0x00, 0x00, 0x84, 0x07, 0x00, 0x00, 0x02, 0x10, 0x00, // .J.M............
	0x00, 0x07, 0x00, 0x09, 0x01, 0x0d, 0x29, 0x06, 0x02, 0x03, 0x81, 0x80, 0x0d, 0x08, 0x06, 0x02, // ......).........
	0x03, 0x68, 0x09, 0x08, 0x0c, 0x04, 0x0c, 0x08, 0x00, 0x09, 0x04, 0x0d, 0x13, 0x01, 0x81, 0xe0, // .h..............
	0x0b, 0x30, 0x09, 0x18, 0x0d, 0x28, 0x03, 0x20, 0x09, 0x04, 0x03, 0x20, 0x09, 0x01, 0x0d, 0x29, // .0...(. ... ...)
	0x03, 0x1c, 0x0d, 0x08, 0x0b, 0x2c, 0x09, 0x08, 0x0c, 0x04, 0x0c, 0x00, 0x00, 0x2a, 0x00, 0x3e, // .....,.......*.>
	0x11, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .@.....a........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x50, 0x11, 0x00, 0x00, 0x01, // ...........P....
	0x00, 0x00, 0x00, 0x04, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x8c, 0x00, 0x0c, 0x00, 0x00, // ................
	0x00, 0x02, 0x00, 0x4e, 0x11, 0x02, 0x00, 0x06, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, // ...N............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x42, 0x00, 0x35, 0x5a, 0x7e, 0x6e, 0xc6, 0x9f, // ........B.5Z~n..
	0x1a, 0x9a, 0xf5, 0x4e, 0x1d, 0x19, 0x72, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, // ...N..r.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // .........p......
	0x00, 0x36, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x34, 0x01, 0x00, // .6.......`...4..
	0x80, 0x60, 0x00, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .`...4...d...5..
	0x80, 0x64, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .d...5...h...5..
	0x80, 0x68, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .h...5.......5..
	0x80, 0x80, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .....5.......5..
	0x80, 0x9c, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .....5.......5..
	0x80, 0xb0, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .....5.......5..
	0x80, 0xd4, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, // .....5.......6..
	0x80, 0xf0, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, // .....6.......6..
	0x80, 0xf4, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .....6.......6..
	0x80, 0x0c, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .....6... ...6..
	0x80, 0x20, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // . ...6...4...6..
	0x80, 0x34, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x4c, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .4...6...L...6..
	0x80, 0x4c, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .L...6...h...6..
	0x80, 0x68, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .h...6.......6..
	0x80, 0x84, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .....6.......6..
	0x80, 0xa0, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, // .....6.......6..
	0x80, 0xb4, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, // .....6.......7..
	0x80, 0xc8, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, // .....7.......7..
	0x80, 0xcc, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, // .....7.......7..
	0x80, 0xe0, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, // .....7.......7..
	0x80, 0x00, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, // .....7... ...7..
	0x80, 0x20, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, // . ...7...<...7..
	0x80, 0x3c, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, // .<...7...H...7..
	0x80, 0x48, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, // .H...7...T...7..
	0x80, 0x54, 0x02, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x38, 0x01, 0x00, // .T...7...X...8..
	0x80, 0x58, 0x02, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0x38, 0x01, 0x00, // .X...8...l...8..
	0x80, 0x6c, 0x02, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x01, 0x00, 0x27, 0x00, 0x18, 0x00, 0x26, // .l...8.....'...&
	0x00, 0x01, 0x00, 0x54, 0x00, 0x17, 0x00, 0x53, 0x00, 0x01, 0x00, 0x54, 0x00, 0x41, 0x00, 0x51, // ...T...S...T.A.Q
	0x00, 0x01, 0x00, 0x54, 0x00, 0x41, 0x00, 0x51, 0x00, 0x01, 0x00, 0x54, 0x00, 0x17, 0x00, 0x53, // ...T.A.Q...T...S
	0x00, 0x01, 0x00, 0x54, 0x00, 0x17, 0x00, 0x53, 0x00, 0x01, 0x00, 0x54, 0x00, 0x0e, 0x00, 0x53, // ...T...S...T...S
	0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, // ...L...C...L...C
	0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, // ...L...C...L...C
	0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, // ...L...C...L...C
	0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x19, 0x00, 0x43, // ...L...C...L...C
	0x00, 0x01, 0x00, 0x4c, 0x00, 0x01, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x01, 0x00, 0x4b, // ...L...K...L...K
	0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, 0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, // ................
	0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, 0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, // ................
	0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, 0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, // ................
	0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, 0x00, 0x01, 0x00, 0x13, 0x00, 0x01, 0x00, 0x12, // ................
	0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, // ................
	0x00, 0xf6, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, // .....(..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // .....X..........
	0x00, 0xfe, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, // .............-..
	0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, // .............4..
	0x00, 0x54, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .T...t..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xca, 0x31, // ...............1
	0x01, 0x38, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x16, 0x10, 0x00, 0x00, 0x98, 0x01, 0x00, // .8..............
	0x00, 0x0a, 0x00, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x58, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, // .X...X.......`..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x1b, 0x15, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .........@......
	0x00, 0x10, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x00, 0xf3, 0xf2, 0xf1, 0x16, 0x00, 0x1b, // ...float4.......
	0x15, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .@.........float
	0x33, 0x00, 0xf3, 0xf2, 0xf1, 0x16, 0x00, 0x01, 0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, // 3...............
	0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0a, 0x00, 0x18, // ................
	0x15, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0e, 0x00, 0x08, 0x10, 0x03, 0x10, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x02, 0x10, 0x00, 0x00, 0x0e, 0x00, 0x17, 0x15, 0x00, 0x00, 0x00, // ................
	0x00, 0x0a, 0x02, 0x70, 0x2c, 0x00, 0x00, 0xf2, 0xf1, 0x0e, 0x00, 0x17, 0x15, 0x00, 0x10, 0x00, // ...p,...........
	0x00, 0x03, 0x02, 0x70, 0x80, 0x00, 0x00, 0xf2, 0xf1, 0x2a, 0x00, 0x03, 0x12, 0x0d, 0x15, 0x03, // ...p.....*......
	0x00, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .......m_sampler
	0x00, 0x0d, 0x15, 0x03, 0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x5f, 0x74, 0x65, 0x78, // ...........m_tex
	0x74, 0x75, 0x72, 0x65, 0x00, 0x22, 0x00, 0x05, 0x15, 0x02, 0x00, 0x00, 0x00, 0x07, 0x10, 0x00, // ture."..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x67, 0x66, 0x78, 0x53, // ...........BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x00, 0x16, 0x00, 0x1b, 0x15, 0x40, 0x00, 0x00, // ampler2D.....@..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x00, 0xf3, 0xf2, // .......float2...
	0xf1, 0x0e, 0x00, 0x01, 0x12, 0x02, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x09, 0x10, 0x00, // ................
	0x00, 0x0a, 0x00, 0x18, 0x15, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0e, 0x00, 0x08, // ................
	0x10, 0x0b, 0x10, 0x00, 0x00, 0x17, 0x00, 0x02, 0x00, 0x0a, 0x10, 0x00, 0x00, 0x12, 0x00, 0x01, // ................
	0x12, 0x03, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x01, 0x10, 0x00, // ................
	0x00, 0x0a, 0x00, 0x18, 0x15, 0x01, 0x10, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0e, 0x00, 0x08, // ................
	0x10, 0x0e, 0x10, 0x00, 0x00, 0x17, 0x00, 0x03, 0x00, 0x0d, 0x10, 0x00, 0x00, 0x0a, 0x00, 0x01, // ................
	0x12, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x08, 0x10, 0x03, 0x10, 0x00, // .....@..........
	0x00, 0x17, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x0a, 0x00, 0x18, 0x15, 0x00, 0x10, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x02, 0x0e, 0x00, 0x17, 0x15, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x10, // ................
	0x87, 0x00, 0x00, 0xf2, 0xf1, 0x0a, 0x00, 0x18, 0x15, 0x13, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x02, 0x0a, 0x00, 0x18, 0x15, 0x06, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x18, 0x02, // ................
	0x00, 0xc6, 0xeb, 0x01, 0x00, 0x24, 0xec, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // .....$..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x66, 0x6c, // ............. fl
	0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, // oatBitsToInt(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x61, 0x73, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x69, 0x6e, 0x74, // asint(_x); }.int
	0x32, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x74, // 2 floatBitsToInt
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // (float2 _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, // turn asint(_x); 
	0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x69, 0x74, 0x73, // }.int3 floatBits
	0x54, 0x6f, 0x49, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x78, 0x29, // ToInt(float3 _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x28, //  { return asint(
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _x); }.int4 floa
	0x74, 0x42, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // tBitsToInt(float
	0x34, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, // 4 _x) { return a
	0x73, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, // sint(_x); }.uint
	0x20, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, //  bitfieldReverse
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (uint _x) { retu
	0x72, 0x6e, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x62, 0x69, 0x74, 0x73, 0x28, 0x5f, // rn reversebits(_
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x62, 0x69, 0x74, 0x66, // x); }.uint2 bitf
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x28, 0x75, 0x69, 0x6e, 0x74, // ieldReverse(uint
	0x32, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, // 2 _x) { return r
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x62, 0x69, 0x74, 0x73, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, // eversebits(_x); 
	0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, // }.uint3 bitfield
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x5f, 0x78, // Reverse(uint3 _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, // ) { return rever
	0x73, 0x65, 0x62, 0x69, 0x74, 0x73, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, // sebits(_x); }.ui
	0x6e, 0x74, 0x34, 0x20, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, // nt4 bitfieldReve
	0x72, 0x73, 0x65, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // rse(uint4 _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x62, 0x69, // return reversebi
	0x74, 0x73, 0x28, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x70, // ts(_x); }.uint p
	0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x66, 0x6c, 0x6f, 0x61, // ackHalf2x16(floa
	0x74, 0x32, 0x20, 0x5f, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t2 _x).{.return 
	0x28, 0x66, 0x33, 0x32, 0x74, 0x6f, 0x66, 0x31, 0x36, 0x28, 0x5f, 0x78, 0x2e, 0x79, 0x29, 0x3c, // (f32tof16(_x.y)<
	0x3c, 0x31, 0x36, 0x29, 0x20, 0x7c, 0x20, 0x66, 0x33, 0x32, 0x74, 0x6f, 0x66, 0x31, 0x36, 0x28, // <16) | f32tof16(
	0x5f, 0x78, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // _x.x);.}.float2 
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6c, 0x66, 0x32, 0x78, 0x31, 0x36, 0x28, 0x75, // unpackHalf2x16(u
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // int _x).{.return
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x66, 0x31, 0x36, 0x74, 0x6f, 0x66, 0x33, 0x32, //  float2(f16tof32
	0x28, 0x5f, 0x78, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x29, 0x2c, 0x20, 0x66, // (_x & 0xffff), f
	0x31, 0x36, 0x74, 0x6f, 0x66, 0x33, 0x32, 0x28, 0x5f, 0x78, 0x20, 0x3e, 0x3e, 0x20, 0x31, 0x36, // 16tof32(_x >> 16
	0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, // ) );.}.struct Bg
	0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x0a, 0x7b, 0x0a, 0x53, 0x61, // fxSampler2D.{.Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, // mplerState m_sam
	0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, // pler;.Texture2D 
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, // m_texture;.};.st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ruct BgfxISample
	0x72, 0x32, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, // r2D.{.Texture2D<
	0x69, 0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, // int4> m_texture;
	0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x55, // .};.struct BgfxU
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, // Sampler2D.{.Text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, // ure2D<uint4> m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, // exture;.};.struc
	0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // t BgfxSampler2DA
	0x72, 0x72, 0x61, 0x79, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, // rray.{.SamplerSt
	0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, // ate m_sampler;.T
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6d, 0x5f, // exture2DArray m_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, // texture;.};.stru
	0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // ct BgfxSampler2D
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // Shadow.{.Sampler
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, // ComparisonState 
	0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, // m_sampler;.Textu
	0x72, 0x65, 0x32, 0x44, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, // re2D m_texture;.
	0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, // };.struct BgfxSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x61, 0x64, // mpler2DArrayShad
	0x6f, 0x77, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, // ow.{.SamplerComp
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, // arisonState m_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // mpler;.Texture2D
	0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, // Array m_texture;
	0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, // .};.struct BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x0a, 0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, // ampler3D.{.Sampl
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // erState m_sample
	0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x6d, 0x5f, 0x74, // r;.Texture3D m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, // exture;.};.struc
	0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, // t BgfxISampler3D
	0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x3c, 0x69, 0x6e, 0x74, // .{.Texture3D<int
	0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, // 4> m_texture;.};
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x55, 0x53, 0x61, 0x6d, // .struct BgfxUSam
	0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // pler3D.{.Texture
	0x33, 0x44, 0x3c, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, // 3D<uint4> m_text
	0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, // ure;.};.struct B
	0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, 0x0a, 0x7b, // gfxSamplerCube.{
	0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, // .SamplerState m_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // sampler;.Texture
	0x43, 0x75, 0x62, 0x65, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, // Cube m_texture;.
	0x7d, 0x3b, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, // };.struct BgfxSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x0a, // mplerCubeShadow.
	0x7b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, // {.SamplerCompari
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // sonState m_sampl
	0x65, 0x72, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x20, // er;.TextureCube 
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x73, 0x74, // m_texture;.};.st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ruct BgfxSampler
	0x32, 0x44, 0x4d, 0x53, 0x0a, 0x7b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // 2DMS.{.Texture2D
	0x4d, 0x53, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e, 0x20, 0x6d, 0x5f, 0x74, 0x65, 0x78, // MS<float4> m_tex
	0x74, 0x75, 0x72, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ture;.};.float4 
	0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, 0x42, 0x67, // bgfxTexture2D(Bg
	0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, // fxSampler2D _sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, // pler, float2 _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, // ord).{.return _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ampler.m_texture
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .Sample(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, // rd);.}.float4 bg
	0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x42, 0x69, 0x61, 0x73, 0x28, // fxTexture2DBias(
	0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, // BgfxSampler2D _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, // ampler, float2 _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x62, 0x69, // coord, float _bi
	0x61, 0x73, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, // as).{.return _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // mpler.m_texture.
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x61, 0x73, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, // SampleBias(_samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // ler.m_sampler, _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x29, 0x3b, 0x0a, 0x7d, // coord, _bias);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, // .float4 bgfxText
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // ure2DLod(BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // pler2D _sampler,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, //  float2 _coord, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // float _level).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // m_texture.Sample
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // Level(_sampler.m
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // , _level);.}.flo
	0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // at4 bgfxTexture2
	0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // DLodOffset(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ampler2D _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float2 _coord
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, // , float _level, 
	0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // int2 _offset).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // m_texture.Sample
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // Level(_sampler.m
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, // , _level, _offse
	0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, // t);.}.float4 bgf
	0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x42, // xTexture2DProj(B
	0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, // gfxSampler2D _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, // mpler, float3 _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x63, // oord).{.float2 c
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, // oord = _coord.xy
	0x20, 0x2a, 0x20, 0x72, 0x63, 0x70, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x7a, 0x29, //  * rcp(_coord.z)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, // r.m_texture.Samp
	0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, // le(_sampler.m_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, // mpler, coord);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, // .float4 bgfxText
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, // ure2DProj(BgfxSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // mpler2D _sampler
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // , float4 _coord)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, // .{.float2 coord 
	0x3d, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, 0x72, 0x63, // = _coord.xy * rc
	0x70, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // p(_coord.w);.ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, // urn _sampler.m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, // exture.Sample(_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ampler.m_sampler
	0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // , coord);.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // t4 bgfxTexture2D
	0x47, 0x72, 0x61, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // Grad(BgfxSampler
	0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // 2D _sampler, flo
	0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at2 _coord, floa
	0x74, 0x32, 0x20, 0x5f, 0x64, 0x50, 0x64, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // t2 _dPdx, float2
	0x20, 0x5f, 0x64, 0x50, 0x64, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  _dPdy).{.return
	0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, //  _sampler.m_text
	0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x64, 0x28, 0x5f, // ure.SampleGrad(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // sampler.m_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x64, 0x50, 0x64, 0x78, // r, _coord, _dPdx
	0x2c, 0x20, 0x5f, 0x64, 0x50, 0x64, 0x79, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // , _dPdy);.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // t4 bgfxTexture2D
	0x41, 0x72, 0x72, 0x61, 0x79, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // Array(BgfxSample
	0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // r2DArray _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float3 _coord
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ).{.return _samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, // ler.m_texture.Sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // mple(_sampler.m_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, // ;.}.float4 bgfxT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, // (BgfxSampler2DAr
	0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, // ray _sampler, fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // oat3 _coord, flo
	0x61, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // at _lod).{.retur
	0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, // n _sampler.m_tex
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, // ture.SampleLevel
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, // (_sampler.m_samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x6f, // ler, _coord, _lo
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, // d);.}.float4 bgf
	0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, // xTexture2DArrayL
	0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // odOffset(BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, // pler2DArray _sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, // pler, float3 _co
	0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, // ord, float _leve
	0x6c, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, // l, int2 _offset)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // .{.return _sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, // er.m_texture.Sam
	0x70, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // pleLevel(_sample
	0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // r.m_sampler, _co
	0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2c, 0x20, 0x5f, 0x6f, 0x66, // ord, _level, _of
	0x66, 0x73, 0x65, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, // fset);.}.float b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x42, 0x67, 0x66, 0x78, // gfxShadow2D(Bgfx
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, // Sampler2DShadow 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // _sampler, float3
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  _coord).{.retur
	0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, // n _sampler.m_tex
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6d, 0x70, 0x4c, 0x65, // ture.SampleCmpLe
	0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // velZero(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x7a, 0x29, // rd.xy, _coord.z)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, // ;.}.float bgfxSh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, // adow2DProj(BgfxS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x5f, // ampler2DShadow _
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // sampler, float4 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // _coord).{.float3
	0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, //  coord = _coord.
	0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x72, 0x63, 0x70, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // xyz * rcp(_coord
	0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, // .w);.return _sam
	0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, // pler.m_texture.S
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, // ampleCmpLevelZer
	0x6f, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, // o(_sampler.m_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x2c, 0x20, // pler, coord.xy, 
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // coord.z);.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x41, // t4 bgfxShadow2DA
	0x72, 0x72, 0x61, 0x79, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // rray(BgfxSampler
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x5f, 0x73, // 2DArrayShadow _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // ampler, float4 _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // coord).{.return 
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // _sampler.m_textu
	0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, // re.SampleCmpLeve
	0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // lZero(_sampler.m
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x77, 0x29, 0x3b, // .xyz, _coord.w);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, // .}.float4 bgfxTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, // xture3D(BgfxSamp
	0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // ler3D _sampler, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, // float3 _coord).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .return _sampler
	0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, // .m_texture.Sampl
	0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, // e(_sampler.m_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, // pler, _coord);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, // .float4 bgfxText
	0x75, 0x72, 0x65, 0x33, 0x44, 0x4c, 0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // ure3DLod(BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // pler3D _sampler,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, //  float3 _coord, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // float _level).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // m_texture.Sample
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // Level(_sampler.m
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x2c, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6e, 0x74, // , _level);.}.int
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28, // 4 bgfxTexture3D(
	0x42, 0x67, 0x66, 0x78, 0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, // BgfxISampler3D _
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // sampler, float3 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, // _coord).{.uint3 
	0x73, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // size;._sampler.m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, // _texture.GetDime
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x2c, 0x20, 0x73, // nsions(size.x, s
	0x69, 0x7a, 0x65, 0x2e, 0x79, 0x2c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x3b, 0x0a, // ize.y, size.z);.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, // m_texture.Load(i
	0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x7a, // nt4(_coord * siz
	0x65, 0x2c, 0x20, 0x30, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, // e, 0) );.}.uint4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x28, 0x42, //  bgfxTexture3D(B
	0x67, 0x66, 0x78, 0x55, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, 0x73, // gfxUSampler3D _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // ampler, float3 _
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x73, // coord).{.uint3 s
	0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // ize;._sampler.m_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, // texture.GetDimen
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x78, 0x2c, 0x20, 0x73, 0x69, // sions(size.x, si
	0x7a, 0x65, 0x2e, 0x79, 0x2c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x72, // ze.y, size.z);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // eturn _sampler.m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, 0x6e, // _texture.Load(in
	0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x7a, 0x65, // t4(_coord * size
	0x2c, 0x20, 0x30, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // , 0) );.}.float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, //  bgfxTextureCube
	0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, // (BgfxSamplerCube
	0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  _sampler, float
	0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 3 _coord).{.retu
	0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, // rn _sampler.m_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x73, 0x61, // xture.Sample(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // mpler.m_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  _coord);.}.floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // t4 bgfxTextureCu
	0x62, 0x65, 0x42, 0x69, 0x61, 0x73, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, // beBias(BgfxSampl
	0x65, 0x72, 0x43, 0x75, 0x62, 0x65, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // erCube _sampler,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, //  float3 _coord, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float _bias).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, // eturn _sampler.m
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, // _texture.SampleB
	0x69, 0x61, 0x73, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, // ias(_sampler.m_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // ampler, _coord, 
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // _bias);.}.float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, //  bgfxTextureCube
	0x4c, 0x6f, 0x64, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, // Lod(BgfxSamplerC
	0x75, 0x62, 0x65, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, // ube _sampler, fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // oat3 _coord, flo
	0x61, 0x74, 0x20, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // at _level).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, // urn _sampler.m_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x65, 0x76, // exture.SampleLev
	0x65, 0x6c, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, // el(_sampler.m_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, // mpler, _coord, _
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // level);.}.float 
	0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x75, 0x62, 0x65, 0x28, 0x42, // bgfxShadowCube(B
	0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x75, 0x62, 0x65, 0x53, 0x68, // gfxSamplerCubeSh
	0x61, 0x64, 0x6f, 0x77, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, // adow _sampler, f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, // loat4 _coord).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // m_texture.Sample
	0x43, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x28, 0x5f, 0x73, 0x61, // CmpLevelZero(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // mpler.m_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x63, 0x6f, //  _coord.xyz, _co
	0x6f, 0x72, 0x64, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // ord.w);.}.float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, //  bgfxTexelFetch(
	0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, // BgfxSampler2D _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, // ampler, int2 _co
	0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, // ord, int _lod).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .return _sampler
	0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, // .m_texture.Load(
	0x69, 0x6e, 0x74, 0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x6f, // int3(_coord, _lo
	0x64, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // d) );.}.float4 b
	0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x66, 0x66, // gfxTexelFetchOff
	0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // set(BgfxSampler2
	0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, // D _sampler, int2
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, //  _coord, int _lo
	0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, // d, int2 _offset)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // .{.return _sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, // er.m_texture.Loa
	0x64, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, // d(int3(_coord, _
	0x6c, 0x6f, 0x64, 0x29, 0x2c, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x29, 0x3b, // lod), _offset );
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, // .}.float2 bgfxTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, // xtureSize(BgfxSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // mpler2D _sampler
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // , int _lod).{.fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x5f, 0x73, 0x61, // oat2 result;._sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // mpler.m_texture.
	0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x72, 0x65, // GetDimensions(re
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x79, // sult.x, result.y
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, // );.return result
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, // ;.}.float4 bgfxT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x28, 0x42, 0x67, 0x66, // extureGather(Bgf
	0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // xSampler2D _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // ler, float2 _coo
	0x72, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, // rd).{.return _sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // mpler.m_texture.
	0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x64, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // GatherRed(_sampl
	0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // er.m_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // oord );.}.float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x68, //  bgfxTextureGath
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // erOffset(BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // pler2D _sampler,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, //  float2 _coord, 
	0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // int2 _offset).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // return _sampler.
	0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, // m_texture.Gather
	0x52, 0x65, 0x64, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x73, // Red(_sampler.m_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // ampler, _coord, 
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // _offset );.}.flo
	0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, // at4 bgfxTextureG
	0x61, 0x74, 0x68, 0x65, 0x72, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ather(BgfxSample
	0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // r2DArray _sample
	0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // r, float3 _coord
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ).{.return _samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x61, // ler.m_texture.Ga
	0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x64, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // therRed(_sampler
	0x2e, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // .m_sampler, _coo
	0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, // rd );.}.int4 bgf
	0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, 0x66, 0x78, // xTexelFetch(Bgfx
	0x49, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ISampler2D _samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ler, int2 _coord
	0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // , int _lod).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, // turn _sampler.m_
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, // texture.Load(int
	0x33, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x20, // 3(_coord, _lod) 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, // );.}.uint4 bgfxT
	0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, 0x66, 0x78, 0x55, 0x53, // exelFetch(BgfxUS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ampler2D _sample
	0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // r, int2 _coord, 
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // int _lod).{.retu
	0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, // rn _sampler.m_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, // xture.Load(int3(
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x20, 0x29, 0x3b, // _coord, _lod) );
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, // .}.float4 bgfxTe
	0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // xelFetch(BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x4d, 0x53, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // pler2DMS _sample
	0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // r, int2 _coord, 
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x29, 0x0a, // int _sampleIdx).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, // r.m_texture.Load
	0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // (_coord, _sample
	0x49, 0x64, 0x78, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // Idx);.}.float4 b
	0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x28, 0x42, 0x67, // gfxTexelFetch(Bg
	0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // fxSampler2DArray
	0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x20, //  _sampler, int3 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, // _coord, int _lod
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, // ).{.return _samp
	0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, // ler.m_texture.Lo
	0x61, 0x64, 0x28, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // ad(int4(_coord, 
	0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _lod) );.}.float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, // 4 bgfxTexelFetch
	0x28, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, // (BgfxSampler3D _
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x5f, 0x63, // sampler, int3 _c
	0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, 0x29, 0x0a, // oord, int _lod).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // {.return _sample
	0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, // r.m_texture.Load
	0x28, 0x69, 0x6e, 0x74, 0x34, 0x28, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x5f, 0x6c, // (int4(_coord, _l
	0x6f, 0x64, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // od) );.}.float3 
	0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, // bgfxTextureSize(
	0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x33, 0x44, 0x20, 0x5f, 0x73, // BgfxSampler3D _s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x6c, 0x6f, 0x64, // ampler, int _lod
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, // ).{.float3 resul
	0x74, 0x3b, 0x0a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x6d, 0x5f, 0x74, 0x65, // t;._sampler.m_te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, // xture.GetDimensi
	0x6f, 0x6e, 0x73, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x72, 0x65, // ons(result.x, re
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x7a, // sult.y, result.z
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, // );.return result
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, // ;.}.float3 instM
	0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // ul(float3 _vec, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // float3x3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x6d, 0x74, 0x78, //  return mul(_mtx
	0x2c, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , _vec); }.float
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 3 instMul(float3
	0x78, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // x3 _mtx, float3 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // _vec) { return m
	0x75, 0x6c, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x3b, 0x20, // ul(_vec, _mtx); 
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, // }.float4 instMul
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x66, 0x6c, // (float4 _vec, fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // oat4x4 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // eturn mul(_mtx, 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // _vec); }.float4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, // instMul(float4x4
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x76, //  _mtx, float4 _v
	0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x75, 0x6c, // ec) { return mul
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_vec, _mtx); }.
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, // bool2 lessThan(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // loat2 _a, float2
	0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, //  _b) { return _a
	0x20, 0x3c, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, 0x6c, //  < _b; }.bool3 l
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // essThan(float3 _
	0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, // a, float3 _b) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3c, 0x20, 0x5f, 0x62, 0x3b, 0x20, // return _a < _b; 
	0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, // }.bool4 lessThan
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // (float4 _a, floa
	0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t4 _b) { return 
	0x5f, 0x61, 0x20, 0x3c, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _a < _b; }.bool2
	0x20, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, //  lessThanEqual(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // loat2 _a, float2
	0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, //  _b) { return _a
	0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, //  <= _b; }.bool3 
	0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, // lessThanEqual(fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // oat3 _a, float3 
	0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, // _b) { return _a 
	0x3c, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x6c, // <= _b; }.bool4 l
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, // essThanEqual(flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // at4 _a, float4 _
	0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3c, // b) { return _a <
	0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x67, 0x72, // = _b; }.bool2 gr
	0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // eaterThan(float2
	0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, //  _a, float2 _b) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x20, 0x5f, 0x62, // { return _a > _b
	0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, // ; }.bool3 greate
	0x72, 0x54, 0x68, 0x61, 0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, // rThan(float3 _a,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  float3 _b) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, // turn _a > _b; }.
	0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, // bool4 greaterTha
	0x6e, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // n(float4 _a, flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // at4 _b) { return
	0x20, 0x5f, 0x61, 0x20, 0x3e, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, //  _a > _b; }.bool
	0x32, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, // 2 greaterThanEqu
	0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, // al(float2 _a, fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // oat2 _b) { retur
	0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, // n _a >= _b; }.bo
	0x6f, 0x6c, 0x33, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, // ol3 greaterThanE
	0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, // qual(float3 _a, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // float3 _b) { ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, // urn _a >= _b; }.
	0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, // bool4 greaterTha
	0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, // nEqual(float4 _a
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, // , float4 _b) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, // eturn _a >= _b; 
	0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, // }.bool2 notEqual
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // (float2 _a, floa
	0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t2 _b) { return 
	0x5f, 0x61, 0x20, 0x21, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, // _a != _b; }.bool
	0x33, 0x20, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 notEqual(float
	0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, // 3 _a, float3 _b)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x21, 0x3d, 0x20, //  { return _a != 
	0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x34, 0x20, 0x6e, 0x6f, 0x74, 0x45, // _b; }.bool4 notE
	0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, // qual(float4 _a, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // float4 _b) { ret
	0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x21, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, // urn _a != _b; }.
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, // bool2 equal(floa
	0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, // t2 _a, float2 _b
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3d, 0x3d, // ) { return _a ==
	0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x20, 0x65, 0x71, 0x75, //  _b; }.bool3 equ
	0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, // al(float3 _a, fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // oat3 _b) { retur
	0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x5f, 0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x62, 0x6f, // n _a == _b; }.bo
	0x6f, 0x6c, 0x34, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // ol4 equal(float4
	0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x29, 0x20, //  _a, float4 _b) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x5f, // { return _a == _
	0x62, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, // b; }.float mix(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat _a, float _
	0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x72, // b, float _t) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, 0x20, 0x5f, // eturn lerp(_a, _
	0x62, 0x2c, 0x20, 0x5f, 0x74, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // b, _t); }.float2
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, //  mix(float2 _a, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float2 _b, float
	0x32, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // 2 _t) { return l
	0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x5f, 0x74, 0x29, 0x3b, // erp(_a, _b, _t);
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, //  }.float3 mix(fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // oat3 _a, float3 
	0x5f, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, // _b, float3 _t) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, //  return lerp(_a,
	0x20, 0x5f, 0x62, 0x2c, 0x20, 0x5f, 0x74, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  _b, _t); }.floa
	0x74, 0x34, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, // t4 mix(float4 _a
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // , float4 _b, flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // at4 _t) { return
	0x20, 0x6c, 0x65, 0x72, 0x70, 0x28, 0x5f, 0x61, 0x2c, 0x20, 0x5f, 0x62, 0x2c, 0x20, 0x5f, 0x74, //  lerp(_a, _b, _t
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x28, 0x66, // ); }.float mod(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat _a, float _
	0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x2d, // b) { return _a -
	0x20, 0x5f, 0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x5f, 0x61, 0x20, 0x2f, //  _b * floor(_a /
	0x20, 0x5f, 0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x6d, //  _b); }.float2 m
	0x6f, 0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, // od(float2 _a, fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // oat2 _b) { retur
	0x6e, 0x20, 0x5f, 0x61, 0x20, 0x2d, 0x20, 0x5f, 0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, // n _a - _b * floo
	0x72, 0x28, 0x5f, 0x61, 0x20, 0x2f, 0x20, 0x5f, 0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // r(_a / _b); }.fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x6f, 0x64, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // oat3 mod(float3 
	0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, // _a, float3 _b) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, 0x20, 0x2d, 0x20, 0x5f, 0x62, 0x20, //  return _a - _b 
	0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x5f, 0x61, 0x20, 0x2f, 0x20, 0x5f, 0x62, 0x29, // * floor(_a / _b)
	0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x6f, 0x64, 0x28, 0x66, // ; }.float4 mod(f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x61, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // loat4 _a, float4
	0x20, 0x5f, 0x62, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5f, 0x61, //  _b) { return _a
	0x20, 0x2d, 0x20, 0x5f, 0x62, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x5f, 0x61, //  - _b * floor(_a
	0x20, 0x2f, 0x20, 0x5f, 0x62, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  / _b); }.float2
	0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec2_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, // t _x) { return f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // loat2(_x, _x); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .float3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x78, 0x2c, // eturn float3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  _x, _x); }.floa
	0x74, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // t4 vec4_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, //  float4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x32, // _x, _x); }.uint2
	0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, //  uvec2_splat(uin
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, // t _x) { return u
	0x69, 0x6e, 0x74, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // int2(_x, _x); }.
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uint3 uvec3_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uint3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x34, 0x20, 0x75, // , _x); }.uint4 u
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec4_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x69, 0x6e, // _x) { return uin
	0x74, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // t4(_x, _x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, // x); }.float4x4 m
	0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // txFromRows(float
	0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x2c, // 4 _0, float4 _1,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  float4 _2, floa
	0x74, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // t4 _3).{.return 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // float4x4(_0, _1,
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  _2, _3);.}.floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // t4x4 mtxFromCols
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // (float4 _0, floa
	0x74, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x32, // t4 _1, float4 _2
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // , float4 _3).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // float4x4(_0, _1,
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, //  _2, _3) );.}.fl
	0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, // oat3x3 mtxFromRo
	0x77, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, // ws(float3 _0, fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // oat3 _1, float3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x6c, 0x6f, // _2).{.return flo
	0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // at3x3(_0, _1, _2
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, 0x6d, 0x74, // );.}.float3x3 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // xFromCols(float3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, //  _0, float3 _1, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // float3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x66, 0x6c, // urn transpose(fl
	0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // oat3x3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, // 2) );.}.static f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, // loat4 u_viewRect
	0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ;.static float4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x73, 0x74, 0x61, // u_viewTexel;.sta
	0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x76, // tic float4x4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, // iew;.static floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, // t4x4 u_invView;.
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, // static float4x4 
	0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, // u_proj;.static f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // loat4x4 u_invPro
	0x6a, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // j;.static float4
	0x78, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, // x4 u_viewProj;.s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, // tatic float4x4 u
	0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, 0x74, // _invViewProj;.st
	0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, // atic float4x4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, // model[32];.stati
	0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // c float4x4 u_mod
	0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, // elView;.static f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // loat4x4 u_modelV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, // iewProj;.static 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // float4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // f4;.uniform floa
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x3b, 0x0a, 0x73, // t4 u_alphaRef;.s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, // tatic float4 u_f
	0x6f, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, // ogStart;.static 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x45, 0x6e, 0x64, 0x3b, // float4 u_fogEnd;
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, // .static float4 u
	0x5f, 0x66, 0x6f, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, // _fogRange;.stati
	0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x44, 0x69, // c float4 u_fogDi
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x66, // sable;.uniform f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // loat4 u_fogColor
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x6f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, // ;.void DoAlphaTe
	0x73, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // st(float a).{.if
	0x28, 0x61, 0x20, 0x3c, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x2e, // (a < u_alphaRef.
	0x78, 0x20, 0x7c, 0x7c, 0x20, 0x61, 0x20, 0x3e, 0x3d, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, // x || a >= u_alph
	0x61, 0x52, 0x65, 0x66, 0x2e, 0x79, 0x29, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x3b, // aRef.y).discard;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x53, 0x61, 0x6d, 0x70, 0x6c, // .}.uniform Sampl
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 0x78, 0x30, 0x53, 0x61, 0x6d, 0x70, // erState tex0Samp
	0x6c, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73, // ler : register(s
	0x30, 0x29, 0x3b, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x54, 0x65, 0x78, 0x74, // 0); uniform Text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x30, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // ure2D tex0Textur
	0x65, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, 0x30, 0x29, // e : register(t0)
	0x3b, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x42, 0x67, 0x66, 0x78, 0x53, 0x61, 0x6d, // ; static BgfxSam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x30, 0x20, 0x3d, 0x20, 0x7b, 0x20, // pler2D tex0 = { 
	0x74, 0x65, 0x78, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x65, 0x78, // tex0Sampler, tex
	0x30, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x7d, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, // 0Texture };.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, //  main( float4 gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, // _FragCoord : SV_
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // POSITION , float
	0x34, 0x20, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x20, 0x3a, 0x20, 0x43, 0x4f, 0x4c, // 4 v_color0 : COL
	0x4f, 0x52, 0x20, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x65, // OR , float3 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, // xcoord0 : TEXCOO
	0x52, 0x44, 0x30, 0x20, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // RD0 , out float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, //  bgfx_FragData0 
	0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x30, 0x20, 0x29, 0x0a, 0x7b, // : SV_TARGET0 ).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x56, 0x6f, 0x69, // .float4 bgfx_Voi
	0x64, 0x46, 0x72, 0x61, 0x67, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // dFrag = vec4_spl
	0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // at(0.0);.float4 
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x30, 0x2a, 0x62, // col = v_color0*b
	0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, 0x74, 0x65, 0x78, // gfxTexture2D(tex
	0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // 0, float2(v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x76, 0x5f, 0x74, // oord0.x, 1.0-v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x62, 0x67, // excoord0.y));.bg
	0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, // fx_FragData0 = f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x43, // loat4(mix(u_fogC
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x72, 0x67, 0x62, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x67, // olor.rgb, col.rg
	0x62, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x7a, // b, v_texcoord0.z
	0x29, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x44, 0x6f, 0x41, 0x6c, 0x70, // ), col.a);.DoAlp
	0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x7d, // haTest(col.a);.}
	0x0a, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x92, 0x00, // ..........I.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........J.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xca, 0x31, // ...............1
	0x01, 0x38, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x44, 0x00, 0x00, // .8...........D..
	0x00, 0x0b, 0x00, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x10, 0x00, // ................
	0x00, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x00, 0xf2, // .bgfxTexture2D..
	0xf1, 0x0e, 0x00, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x00, 0x00, 0x6d, 0x69, 0x78, // .............mix
	0x00, 0x16, 0x00, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x00, 0x00, 0x44, 0x6f, 0x41, // .............DoA
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // lphaTest........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x33, 0x44, // .............D3D
	0x53, 0x48, 0x44, 0x52, 0x00, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SHDR.p..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, // . ..`...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x10, 0x00, // ................
	0x00, 0x62, 0x67, 0x66, 0x78, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x00, 0xf2, // .bgfxTexture2D..
	0xf1, 0x0e, 0x00, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x00, 0x00, 0x6d, 0x69, 0x78, // .............mix
	0x00, 0x16, 0x00, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x00, 0x00, 0x44, 0x6f, 0x41, // .............DoA
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // lphaTest........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, // ................
	0xff, 0x1a, 0x09, 0x2f, 0xf1, 0x28, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x75, 0x00, 0x00, // .../.(.......u..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, // .............U..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, // .....5..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .... ...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, // ................
	0x00, 0x18, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....$...0......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x25, // ...............%
	0x11, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, // ...........main.
	0x00, 0x1e, 0x00, 0x51, 0x11, 0x12, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, // ...Q............
	0xff, 0xff, 0xff, 0xff, 0xff, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x00, // .....u_alphaRef.
	0x00, 0x1e, 0x00, 0x51, 0x11, 0x12, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0xff, // ...Q............
	0xff, 0xff, 0xff, 0xff, 0xff, 0x75, 0x5f, 0x66, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, // .....u_fogColor.
	0x00, 0x1e, 0x00, 0x51, 0x11, 0x14, 0x10, 0x00, 0x00, 0x06, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, // ...Q............
	0xff, 0x00, 0x00, 0xff, 0xff, 0x74, 0x65, 0x78, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .....tex0Sampler
	0x00, 0x1e, 0x00, 0x51, 0x11, 0x15, 0x10, 0x00, 0x00, 0x07, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, // ...Q............
	0x00, 0xff, 0xff, 0xff, 0xff, 0x74, 0x65, 0x78, 0x30, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .....tex0Texture
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1a, 0x09, 0x2f, // .............../
	0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, // ................
	0xff, 0x77, 0x09, 0x31, 0x01, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x14, 0x8e, 0x0e, 0x00, 0x14, // .w.1............
	0x6b, 0x0f, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, // k....L... ...,..
	0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, // .T..............
	0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, // .........p... ..
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x09, // `...............
	0x00, 0x8c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, // .............mai
	0x6e, 0x00, 0x6e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x2d, 0xba, 0x2e, 0xf1, 0x01, 0x00, 0x00, // n.none...-......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // .....p... ..`...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, // .............p..
	0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, // ................
	0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x46, 0x3a, 0x5c, 0x64, 0x65, 0x76, 0x5c, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x72, 0x65, 0x33, // .F:.dev.code.re3
	0x2d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5c, 0x6c, 0x69, 0x62, 0x72, 0x77, 0x5c, // -upstream.librw.
	0x73, 0x72, 0x63, 0x5c, 0x62, 0x67, 0x66, 0x78, 0x5c, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, // src.bgfx.shaders
	0x5c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x5f, 0x62, 0x67, 0x66, 0x78, 0x2e, // .simple_fs_bgfx.
	0x69, 0x6e, 0x63, 0x2e, 0x68, 0x6c, 0x73, 0x6c, 0x00, 0xfe, 0xef, 0xfe, 0xef, 0x01, 0x00, 0x00, // inc.hlsl........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x00, 0xff, 0xff, // ................
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x2e, 0x31, // ...............1
	0x01, 0x50, 0xd9, 0xbe, 0x5e, 0x01, 0x00, 0x00, 0x00, 0x95, 0x1f, 0x76, 0xf0, 0xdd, 0x44, 0x9c, // .P..^......v..D.
	0x4d, 0xa8, 0x41, 0x88, 0xbe, 0x4b, 0x4b, 0x1e, 0x98, 0x75, 0x00, 0x00, 0x00, 0x2f, 0x4c, 0x69, // M.A..KK..u.../Li
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x00, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x00, 0x2f, 0x73, // nkInfo./names./s
	0x72, 0x63, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x2f, // rc/headerblock./
	0x73, 0x72, 0x63, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x66, 0x3a, 0x5c, 0x64, 0x65, 0x76, // src/files/f:.dev
	0x5c, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x72, 0x65, 0x33, 0x2d, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, // .code.re3-upstre
	0x61, 0x6d, 0x5c, 0x6c, 0x69, 0x62, 0x72, 0x77, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x62, 0x67, 0x66, // am.librw.src.bgf
	0x78, 0x5c, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, // x.shaders.simple
	0x5f, 0x66, 0x73, 0x5f, 0x62, 0x67, 0x66, 0x78, 0x2e, 0x69, 0x6e, 0x63, 0x2e, 0x68, 0x6c, 0x73, // _fs_bgfx.inc.hls
	0x6c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, // l.............:.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x00, // ................
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x22, 0x00, // ..............".
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x51, 0x33, 0x01, 0x00, 0x00, // ...........Q3...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0xd1, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x5b, 0x01, 0x00, // . ...........[..
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x2c, 0x00, 0x00, 0x80, 0x00, 0x00, // .|.......y,.....
	0x00, 0xb6, 0x2b, 0x00, 0x00, 0x9c, 0x0a, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, // ..+......`......
	0x00, 0x28, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, // .(...P...,......
	0x00, 0x03, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, // .....D...&...C..
	0x00, 0x3d, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, // .=...........(..
	0x00, 0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, // .)...*...+...,..
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // .-......./...0..
	0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, // .1...2...3...4..
	0x00, 0x35, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // .5...6...7...8..
	0x00, 0x39, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, // .9...:...;...<..
	0x00, 0x1f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, // ................
	0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, // .!..."...#...$..
	0x00, 0x25, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, // .%.......'...>..
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, // .?...@...B...A..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, // .............E..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00,                                                                                           // .
};
